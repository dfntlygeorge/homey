generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Listing {
  id             Int                   @id @default(autoincrement())
  title          String
  description    String
  location       String
  rent           Int
  roomType       RoomType              @map("room_type")
  slotsAvailable Int                   @map("slots_available")
  contactInfo    String                @map("contact_info")
  reviews        Review[]
  images         Image[]
  status         ListingStatus         @default(PENDING)
  genderPolicy   GenderPolicy          @map("gender_policy")
  curfew         CurfewPolicy
  laundry        LaundryAvailability
  caretaker      CaretakerAvailability
  kitchen        KitchenAvailability
  wifi           WifiAvailability
  utilities      UtilityInclusion
  pets           PetPolicy

  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Review {
  id      Int    @id @default(autoincrement())
  rating  Int
  comment String

  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  listingId Int     @map("listing_id")
  listing   Listing @relation(fields: [listingId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Image {
  id  Int    @id @default(autoincrement())
  url String

  listingId Int     @map("listing_id")
  listing   Listing @relation(fields: [listingId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  role UserRole?

  listings Listing[]
  reviews  Review[]

  @@map("users")
}

enum RoomType {
  STUDIO
  BOARDING_HOUSE
  DORMITORY
  BEDSPACE
  CONDO
  HOUSE
}

enum UserRole {
  STUDENT
  LANDLORD
  ADMIN
}

enum GenderPolicy {
  MALE_ONLY
  FEMALE_ONLY
  MIXED
}

enum CurfewPolicy {
  NO_CURFEW
  HAS_CURFEW
}

enum LaundryAvailability {
  NOT_AVAILABLE
  AVAILABLE
}

enum CaretakerAvailability {
  NOT_AVAILABLE
  AVAILABLE
}

enum KitchenAvailability {
  NOT_AVAILABLE
  AVAILABLE
}

enum WifiAvailability {
  NOT_AVAILABLE
  AVAILABLE
}

enum UtilityInclusion {
  NOT_INCLUDED
  INCLUDED
}

enum PetPolicy {
  NOT_ALLOWED
  ALLOWED
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
}
